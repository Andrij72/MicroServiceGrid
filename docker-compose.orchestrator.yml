networks:
  microservices-net:
    external: true

services:
  # --------------------------
  # MySQL для Order Service
  # --------------------------
  mysql-order:
    image: mysql:8.0.32
    container_name: mysql_order
    restart: always
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${ROOT_MYSQL_PASS}
      MYSQL_DATABASE: order_service
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASS}
    volumes:
      - order_mysql_data:/docker/mysql/data
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${ROOT_MYSQL_PASS}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-net

  # --------------------------
  # MySQL для Inventory Service
  # --------------------------
  mysql-inventory:
    image: mysql:8.0.32
    container_name: mysql_inventory
    restart: always
    ports:
      - "3308:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${ROOT_MYSQL_PASS}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASS}
      MYSQL_DATABASE: inventory_service
    volumes:
      - inventory_mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -uroot -p${ROOT_MYSQL_PASS} || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 20
    networks:
      - microservices-net

  # --------------------------
  # MongoDB для Product Service
  # --------------------------
  mongo:
    image: mongo:7.0
    container_name: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASS}
      MONGO_INITDB_DATABASE: product_service
    ports:
      - "27017:27017"
    volumes:
     - mongo_data:/data/db
    networks:
      - microservices-net
  # ---------------------------------------
  # Kafka & Zookeeper & SchemaRegistry & UI
  # ---------------------------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - microservices-net

  broker:
    image: confluentinc/cp-kafka:7.5.0
    container_name: broker
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - microservices-net

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    container_name: schema-registry
    hostname: schema-registry
    depends_on:
      - broker
    ports:
      - "8085:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
    networks:
      - microservices-net

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8086:8080"
    depends_on:
      - broker
      - schema-registry
    environment:
      KAFKA_CLUSTERS_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: broker:29092
      KAFKA_CLUSTERS_SCHEMAREGISTRY: http://schema-registry:8081
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - microservices-net

  # --------------------------
  # API Gateway
  # --------------------------
  api-gateway:
    image: andr72/api-gateway:dev-latest
    container_name: api-gateway
    ports:
      - "9000:9000"
    depends_on:
      - order-service
      - product-service
      - inventory-service
    networks:
      - microservices-net

  # --------------------------
  # Product Service
  # --------------------------
  product-service:
    image: andr72/product-service:dev-latest
    container_name: product-service
    depends_on:
      - mongo
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_URI: mongodb://${MONGO_USER}:${MONGO_PASS}@mongo:27017/product_service?authSource=admin
    networks:
      - microservices-net

  # --------------------------
  # Order Service
  # --------------------------
  order-service:
    image: andr72/order-service:dev-latest
    container_name: order-service
    restart: always
    ports:
      - "8083:8083"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-order:3306/order_service?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true&useSSL=true
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASS}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: broker:29092
    depends_on:
      mysql-order:
        condition: service_healthy
      broker:
        condition: service_started
    networks:
      - microservices-net
  # --------------------------
  # Inventory Service
  # --------------------------
  inventory-service:
    image: andr72/inventory-service:dev-latest
    container_name: inventory-service
    restart: always
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-inventory:3306/inventory_service?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true&useSSL=true
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASS}
    depends_on:
      mysql-inventory:
        condition: service_healthy
    networks:
      - microservices-net
  # --------------------------
  # Notification Service
  # --------------------------
  notification-service:
    image: andr72/notification-service:dev-latest
    container_name: notification-service
    restart: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8089:8089"
    networks:
      - microservices-net

volumes:
  order_mysql_data:
  inventory_mysql_data:
  mongo_data: